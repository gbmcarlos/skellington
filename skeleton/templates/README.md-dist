# {{projectName}}
Created from `gbmcarlos/{{projectName}}` as a composer skeleton (`composer create-project`)

## Requirements
* Docker

## Installation
TL;DR: run `./deploy/up.sh`.

This application is dockerized, which means that everything happens inside a Docker container. The Apache server is running inside the container (as the default entrypoint), the dependencies (Composer and NPM) are installed inside the container and PHP is executed inside the container.
To spin up the Docker container (build the image and run the container), just run `./deploy/up.sh`.

## Development
TL;DR: run `./deploy/local.up.sh` once and start coding.

When developing in a local environment, just run `./deploy/local.up.sh`.
This will build the image and run the container normally, but mounting volumes for the source and vendors folders.

By mounting volumes on those folders, it makes the dependencies (installed only inside the container) available outside the container (so available to your IDE).
Also it makes all changes on those folders reflect instantly inside the container, so there is no need to re-deploy.

Running `./deploy/local.up.sh` will also automatically tail the output of the container.

## Environment variables available
These environment variables are used and given a default value only in the `up.sh` and `local.up.sh` scripts as part of the docker `build` and `run` commands. If you build the docker image and run the docker container on your own, make sure to pass the values to those commands accordingly.

|       ENV VAR        |                  Default value                | Description |
| -------------------- | --------------------------------------------- | ----------- |
| PROJECT_NAME         | Name of the project's root folder             | Used to name the docker image and docker container from the `up.sh` files |
| HOST_PORT            | 80                                            | The port Docker will use as the host port in the network bridge. This is the external port, the one your app will be called through |
| COMPOSER_OPTIMIZE    | `true` for `up.sh`, `false` for `local.up.sh` | Optimize Composer's autoload with [Optimization Level 2/A](https://getcomposer.org/doc/articles/autoloader-optimization.md#optimization-level-2-a-authoritative-class-maps) (build argument only) |
| ASSETS_OPTIMIZE      | `true` for `up.sh`, `false` for `local.up.sh` | Optimize assets compilation (build argument only) |
| BASIC_AUTH_ENABLED   | `true` for `up.sh`, `false` for `local.up.sh` | Enable Basic Authentication with Apache (Persisted environment variable) |
| BASIC_AUTH_USER      | admin                                         | If `BASIC_AUTH_ENABLED` is `true`, this will be used to run `htpasswd` together with `BASIC_AUTH_PASSWORD` to encrypt with bcrypt (cost 10) (build argument only) |
| BASIC_AUTH_PASSWORD  | `PROJECT_NAME`_password                       | If `BASIC_AUTH_ENABLED` is `true`, this will be used to run `htpasswd` together with `BASIC_AUTH_USER` to encrypt with bcrypt (cost 10) (build argument only) |
| XDEBUG_ENABLED       | `true` for `up.sh`, `false` for `local.up.sh` | Enables and configures Xdebug inside the container (build argument only) |
| XDEBUG_REMOTE_HOST   | 10.254.254.254                                | Used as the `xdebug.remote_host` PHP ini configuration value (build argument only) |
| XDEBUG_REMOTE_PORT   | 9000                                          | Used as the `xdebug.remote_port` PHP ini configuration value (build argument only) |
| XDEBUG_IDE_KEY       | PHPSTORM                                      | Used as the `xdebug.idekey` PHP ini configuration value (build argument only) |

Example:
`HOST_PORT=8000 BASIC_AUTH_ENABLED=true BASIC_AUTH_USER=user BASIC_AUTH_PASSWORD=secure_password XDEBUG_ENABLED=true ./deploy/local.up.sh`

## Running commands
Since the application runs inside the container, all commands have to be executed there. To do so, run `docker exec -it {{projectName}} /bin/sh -c "{command}"`.
For example, to run a Artisan command, run `docker exec -it {{projectName}} /bin/sh -c "php artisan config:cache"`

## Watch assets
To watch the assets (see the compiled changes instantly reflect after every change) run `docker exec -it -w /var/www {{projectName}} /bin/sh -c "node_modules/webpack/bin/webpack.js --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js --watch"`

## Update dependencies (extract lock files)

Composer lock: `docker cp {{projectName}}:/var/www/composer.lock $PWD/../../composer.lock`

NPM lock: `docker cp {{projectName}}:/var/www/package-lock.json $PWD/../../package-lock.json`

## Xdebug support
Even though the project runs inside a Docker container, it still provides support for debugging with Xdebug. By telling Xdebug the remote location of your IDE and configuring this one to listen to certain port, they can communicate with one another.

Use the `XDEBUG_` environment variables to configure your project's debugging.

#### Xdebug for PhpStorm on Mac
Check [this documentation](https://gist.github.com/gbmcarlos/f90bef184873c46c6186880b3d633ff6) to configure your IDE and system.
Use the `XDEBUG_` environment variables and the path mappings:
* "src" -> `/var/www/src`
* "vendor" -> `/var/www/vendor`

## Built-in Stack
* [Debian (:stretch slim)](https://hub.docker.com/_/debian/)
* Apache 2
* [PHP 7.2.8 (:7.2-apache-stretch)](https://hub.docker.com/_/php/)
* Laravel 5.6
* jQuery 3.2
* Bootstrap 4.1