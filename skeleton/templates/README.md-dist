# {{projectName}}
Created from `gbmcarlos/skellington` as a composer skeleton (`composer create-project`)

### Requirements
* Docker

### Installation
TL;DR: run `./deploy/up.sh`.

This application is dockerized, which means that everything happens inside a Docker container. The Apache server is running inside the container (as the default entrypoint), the dependencies (Composer and NPM) are installed inside the container and PHP is executed inside the container.
To spin up the Docker container (build the image and run the container), just run `./deploy/up.sh`.

### Development
TL;DR: run `./deploy/local.up.sh` once and start coding.

When developing in a local environment, just run `./deploy/local.up.sh`.
This will build the image and run the container normally, but mounting volumes for the source and vendors folders.

By mounting volumes on those folders, it makes the dependencies (installed only inside the container) available outside the container (so available to your IDE).
Also it makes all changes on those folders reflect instantly inside the container, so there is no need to re-deploy.

Running `./deploy/local.up.sh` will also automatically tail the output of the container.

### Running commands
Since the application runs inside the container, all commands have to be executed there. To do so, run `docker exec -it ecp /bin/sh -c "{command}"`.
For example, to run a Artisan command, run `docker exec -it ecp /bin/sh -c "php artisan config:cache"`

## Watch assets
To watch the assets (see the compiled changes instantly reflect after every change) run `docker exec ecp /var/www/compile-assets.sh watch`

### Extract lock files (updating dependencies)
Composer lock: docker cp ecp:/var/www/composer.lock $PWD/../../composer.lock
NPM lock: docker cp ecp:/var/www/package-lock.json $PWD/../../package-lock.json

### Environment variables available

|       ENV VAR      | Default value | Description |
| ------------------ | ------------- | ----------- |
| HOST_PORT          | 80            | The port Docker will use as the host port in the network bridge. This is the external port, the one your app will be called through. |
| CONTAINER_PORT     | 80            | The port that Apache will listen to from inside the container. |
| COMPOSER_OPTIMIZE  | false         | Optimize Composer's autoload with [Optimization Level 2/A](https://getcomposer.org/doc/articles/autoloader-optimization.md#optimization-level-2-a-authoritative-class-maps). |

Example:
`HOST_PORT=8000 ./deploy/local.up.sh`

### Built-in Stack
* [Debian (:stretch slim)](https://hub.docker.com/_/debian/)
* Apache 2
* [PHP 7.2.8 (:7.2-apache-stretch)](https://hub.docker.com/_/php/)
* Laravel 5.6
* jQuery 3.2
* Bootstrap 4.1